// <auto-generated />
using System;
using Infrastructure.DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201124095154_Seeding")]
    partial class Seeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Model.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EntryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("HasUploadedDocument")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUploadedProfilePhoto")
                        .HasColumnType("bit");

                    b.Property<int?>("IdentificationId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExisting")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MailingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("OTP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RCNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidentialAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("StateOfOriginId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("IdentificationId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Core.Model.AppUserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUserTypes");
                });

            modelBuilder.Entity("Core.Model.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Core.Model.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Core.Model.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Core.Model.Identification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Identification");
                });

            modelBuilder.Entity("Core.Model.NextOfKin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("GenderId");

                    b.ToTable("NextOfKins");
                });

            modelBuilder.Entity("Core.Model.OTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeSlug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int?>("PlatformId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PlatformId");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("Core.Model.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("OfferStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferStatusId");

                    b.HasIndex("PlotId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Core.Model.OfferStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OfferStatuses");
                });

            modelBuilder.Entity("Core.Model.OrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("Core.Model.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentProviderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReceiptPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentProviderId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Core.Model.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Core.Model.PaymentProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentProviders");
                });

            modelBuilder.Entity("Core.Model.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatuses");
                });

            modelBuilder.Entity("Core.Model.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Core.Model.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Core.Model.Plot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Acres")
                        .HasColumnType("float");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<double>("KilometerSquare")
                        .HasColumnType("float");

                    b.Property<double>("Lattitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlotTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PlotTypeId");

                    b.ToTable("Plots");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 325, DateTimeKind.Local).AddTicks(6690),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(480),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 126 - Arkansas",
                            PlotTypeId = 3
                        },
                        new
                        {
                            Id = 3,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1060),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1070),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 512 - Arizona",
                            PlotTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1080),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1090),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 100C - Junea",
                            PlotTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1090),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1090),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 610 - Anchorage",
                            PlotTypeId = 3
                        },
                        new
                        {
                            Id = 6,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1090),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1090),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 100B - Phonenix",
                            PlotTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1100),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1100),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 181A - Sacramento",
                            PlotTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1100),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1100),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 162 - Hartford)",
                            PlotTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1100),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1100),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 812 - Dover)",
                            PlotTypeId = 3
                        },
                        new
                        {
                            Id = 10,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1110),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1110),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 809 - Tallahassee",
                            PlotTypeId = 3
                        },
                        new
                        {
                            Id = 11,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1110),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1110),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 132 - Honolulu)",
                            PlotTypeId = 3
                        },
                        new
                        {
                            Id = 12,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1110),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1110),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 113 - Topeka",
                            PlotTypeId = 2
                        },
                        new
                        {
                            Id = 13,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1110),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1120),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 103 - Des Moines",
                            PlotTypeId = 2
                        },
                        new
                        {
                            Id = 14,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1120),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1120),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 100A - Boston Lansing",
                            PlotTypeId = 2
                        },
                        new
                        {
                            Id = 15,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1120),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1120),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 201 - Louisville",
                            PlotTypeId = 3
                        },
                        new
                        {
                            Id = 16,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1120),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1120),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 197 - Nankling Tushe, West Bridge",
                            PlotTypeId = 1
                        },
                        new
                        {
                            Id = 17,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1130),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1130),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 1960 - Augusta Manopolis",
                            PlotTypeId = 1
                        },
                        new
                        {
                            Id = 18,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1130),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1130),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 111 - Cheyenne",
                            PlotTypeId = 1
                        },
                        new
                        {
                            Id = 19,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1130),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1130),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 122 - Virginia Campton",
                            PlotTypeId = 2
                        },
                        new
                        {
                            Id = 20,
                            Acres = 30.0,
                            Address = "Block 8A Balogun Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1130),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1140),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 121B - Madison",
                            PlotTypeId = 2
                        },
                        new
                        {
                            Id = 61,
                            Acres = 30.0,
                            Address = "1289 Road, Alabama Ogundaide Street, Orange Island",
                            DateCreated = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1140),
                            DateModified = new DateTime(2020, 11, 24, 10, 51, 54, 330, DateTimeKind.Local).AddTicks(1140),
                            IsAvailable = true,
                            IsEnabled = true,
                            KilometerSquare = 0.0,
                            Lattitude = 33.399999999999999,
                            Longitude = 45.899999999999999,
                            Name = "Plot 1289, Road 6B - Alabama",
                            PlotTypeId = 1
                        });
                });

            modelBuilder.Entity("Core.Model.PlotType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlotTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = false,
                            Name = "BRONZE"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = false,
                            Name = "SILVER"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = false,
                            Name = "GOLD"
                        });
                });

            modelBuilder.Entity("Core.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Core.Model.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Core.Model.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Core.Model.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("OfferId");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Core.Model.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Core.Model.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Core.Model.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Core.Model.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.Model.AppUser", b =>
                {
                    b.HasOne("Core.Model.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Core.Model.Identification", "Identification")
                        .WithMany()
                        .HasForeignKey("IdentificationId");

                    b.HasOne("Core.Model.OrganizationType", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId");

                    b.HasOne("Core.Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Core.Model.Document", b =>
                {
                    b.HasOne("Core.Model.AppUser", "AppUser")
                        .WithMany("Documents")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.NextOfKin", b =>
                {
                    b.HasOne("Core.Model.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");
                });

            modelBuilder.Entity("Core.Model.OTP", b =>
                {
                    b.HasOne("Core.Model.AppUser", "AppUser")
                        .WithMany("OTPs")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");
                });

            modelBuilder.Entity("Core.Model.Offer", b =>
                {
                    b.HasOne("Core.Model.OfferStatus", "OfferStatus")
                        .WithMany()
                        .HasForeignKey("OfferStatusId");

                    b.HasOne("Core.Model.Plot", "Plot")
                        .WithMany()
                        .HasForeignKey("PlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.Payment", b =>
                {
                    b.HasOne("Core.Model.Offer", "Offer")
                        .WithMany("Payments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.PaymentProvider", "PaymentProvider")
                        .WithMany()
                        .HasForeignKey("PaymentProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.PaymentStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.Plot", b =>
                {
                    b.HasOne("Core.Model.AppUser", "AppUser")
                        .WithMany("Plots")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Core.Model.PlotType", "PlotType")
                        .WithMany()
                        .HasForeignKey("PlotTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.RoleClaim", b =>
                {
                    b.HasOne("Core.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.Subscription", b =>
                {
                    b.HasOne("Core.Model.AppUser", "AppUser")
                        .WithMany("Subscriptions")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Core.Model.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId");

                    b.HasOne("Core.Model.OrganizationType", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId");
                });

            modelBuilder.Entity("Core.Model.UserClaim", b =>
                {
                    b.HasOne("Core.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.UserLogin", b =>
                {
                    b.HasOne("Core.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.UserRole", b =>
                {
                    b.HasOne("Core.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.UserToken", b =>
                {
                    b.HasOne("Core.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
